
use specs::prelude::*;
use specs_derive::*;
use rltk::{RGB};

// This is the code generated by #[derive(Component)]
// impl Component for Position {
//     type Storage = VecStorage<Self>;
// }
// The Specs documentation has information on other specialized storage types.

#[derive(Component)]
pub struct Position {
    pub x: i32,
    pub y: i32,
}

#[derive(Component)]
pub struct Renderable {
    pub glyph: rltk::FontCharType,
    pub fg: RGB,
    pub bg: RGB,
}

#[derive(Component)]
pub struct Viewshed {
    pub visible_tiles: Vec<rltk::Point>,
    pub range: i32,
    pub dirty: bool,
}

#[derive(Component, Debug)]
pub struct Player {}

// #[derive(Component)]
// struct Mover {}

// struct Walker {}

// impl<'a> System<'a> for Walker {
//     type SystemData = (ReadStorage<'a, Mover>,
//                         WriteStorage<'a, Position>);

//     fn run(&mut self, (walker, mut pos) : Self::SystemData) {
//         let mut rng = rltk::RandomNumberGenerator::new();
//         for (_walker, pos) in (&walker, &mut pos).join() {
//             match rng.range(1, 5) {
//                 1 => { pos.y += 1; if pos.y > 49 { pos.y = 0 }; },
//                 2 => { pos.y -= 1; if pos.y < 0 { pos.y = 49 }; },
//                 3 => { pos.x += 1; if pos.x > 79 { pos.x = 0 }; },
//                 4 => { pos.x -= 1; if pos.x < 0 { pos.x = 79 }; },
//                 _ => {}
//             }
//         }
//     }
// }